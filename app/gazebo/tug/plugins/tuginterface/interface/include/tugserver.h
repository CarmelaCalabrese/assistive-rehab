// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-
/*
 * Copyright (C) 2015 iCub Facility
 * Authors: Valentina Vasco
 * CopyPolicy: Released under the terms of the LGPLv2.1 or any later version, see LGPL.TXT or LGPL3.TXT
 *
 */

#ifndef GAZEBO_ASSISTIVEREHAB_TUGSERVER
#define GAZEBO_ASSISTIVEREHAB_TUGSERVER

#include <yarp/sig/Matrix.h>

#include <gazebo/gazebo.hh>
#include <gazebo/physics/World.hh>
#include <gazebo/physics/Actor.hh>

#include <../thrift/autogenerated/include/TugInterfaceServer.h>

class TugServer: public TugInterfaceServer
{
private:
    gazebo::physics::WorldPtr world;
    gazebo::physics::ActorPtr actor;
    double speed;
    int numwaypoints;
    yarp::sig::Matrix targets;
    std::map<double, ignition::math::Pose3d> wp_map;

public:
    TugServer();
    ~TugServer();

    /**
     * Start script for moving actor.
     * @return returns true or false on success / failure
     */
    virtual bool start();

    /**
     * Stop script for moving actor.
     * @return returns true or false on success / failure
     */
    virtual bool stop();

    /**
     * Set walking speed for reaching the target.
     * @param speed velocity to set.
     * @return returns true or false on success / failure
     */
    virtual bool setSpeed(const double speed);

    /**
     * Get walking speed.
     * @return returns walking speed
     */
    virtual double getSpeed();

    /**
     * Pause actor for time seconds.
     * @param time seconds during which actor is paused.
     * @return returns walking speed
     */
    virtual bool pause(const double time);

    void init(const double &speed, const int numwaypoints, const yarp::sig::Matrix &waypoints);

    void attachWorldPointer(gazebo::physics::WorldPtr p)
    {
        world=p;
    }

    void attachActorPointer(gazebo::physics::ActorPtr p)
    {
        actor=p;
    }

};

#endif
