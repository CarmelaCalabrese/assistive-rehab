name: Continuous Integration

on:
  push:
    branches:
    - 'master'
    - 'feat/**'
    - 'fix/**'
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'

env:
  vcpkg_robotology_TAG: v0.3.0
    
jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@master

    - name: Display environment variables
      shell: bash
      run: env

    # Remove apt repos that are known to break from time to time 
    # See https://github.com/actions/virtual-environments/issues/323  
    - name: Remove broken apt repos [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        
    # ============
    # DEPENDENCIES
    # ============
    - name: Download Vcpkg Prebuilt Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      run: |
        # To avoid spending a huge time compiling vcpkg dependencies, we download a root that comes precompiled with all the ports that we need 
        choco install -y wget unzip
        # To avoid problems with non-relocatable packages, we unzip the archive exactly in the same C:/robotology/vcpkg 
        # that has been used to create the pre-compiled archive
        cd C:/
        md C:/robotology
        md C:/robotology/vcpkg
        wget https://github.com/robotology/robotology-superbuild-dependencies-vcpkg/releases/download/${env:vcpkg_robotology_TAG}/vcpkg-robotology.zip
        unzip vcpkg-robotology.zip -d C:/robotology/vcpkg
        # Overwrite the VCPKG_INSTALLATION_ROOT env variable defined by GitHub Actions to point to our vcpkg
        echo "::set-env name=VCPKG_INSTALLATION_ROOT::C:/robotology/vcpkg"
        
    - name: Build Vcpkg Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        ${VCPKG_INSTALLATION_ROOT}/vcpkg.exe install --recurse --triplet x64-windows opencv[contrib] vtk hdf5 fftw3

    - name: Install Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install git build-essential pkg-config zip unzip zlib1g-dev cmake libace-dev coinor-libipopt-dev libeigen3-dev swig \
                         qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libtinyxml-dev libgsl-dev libmatio-dev fftw3 wget curl autoconf \
                         autogen automake libtool mlocate python python3-numpy python3-dev python3-pip python3-wheel
        # install Bazel 0.26.1 needed by tensorflow_cc
        #wget https://github.com/bazelbuild/bazel/releases/download/0.26.1/bazel_0.26.1-linux-x86_64.deb
        #sudo dpkg -i bazel_0.26.1-linux-x86_64.deb
        
    - name: Build Source-based Dependencies [Windows] 
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # ycm
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/ycm.git --depth 1 --branch master
        cd ycm && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        # yarp
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp.git --depth 1 --branch master
        cd yarp && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        # icub-main
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-main.git --depth 1 --branch devel
        cd icub-main && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_icubmod_cartesiancontrollerserver=ON -DENABLE_icubmod_cartesiancontrollerclient=ON \
                     -DENABLE_icubmod_gazecontrollerclient=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        # cer
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/cer.git --depth 1 --branch devel
        cd cer && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        # icub-contrib-common
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-contrib-common.git --depth 1
        cd icub-contrib-common && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..        
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        
    - name: Build Source-based Dependencies [Ubuntu] 
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        # opencv
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/opencv/opencv.git --depth 1 --branch 4.2.0
        git clone https://github.com/opencv/opencv_contrib.git --depth 1 --branch 4.2.0
        cd opencv && mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DOPENCV_EXTRA_MODULES_PATH=${GITHUB_WORKSPACE}/opencv_contrib/modules \
              -DBUILD_EXAMPLES=OFF -DBUILD_DOCS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # vtk
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/Kitware/VTK.git --depth 1 --branch v8.1.0
        cd VTK && mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # tensorflow_cc
        #cd ${GITHUB_WORKSPACE}
        #git clone https://github.com/FloopCZ/tensorflow_cc.git --depth 1 --branch master
        #cd tensorflow_cc/tensorflow_cc && mkdir -p build && cd build
        #cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DTENSORFLOW_STATIC=OFF -DTENSORFLOW_SHARED=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        #cmake --build . --config ${{ matrix.build_type }} --target install 
        # ycm
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/ycm.git --depth 1 --branch master
        cd ycm && mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # yarp
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp.git --depth 1 --branch master
        cd yarp && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # icub-main
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-main.git --depth 1 --branch devel
        cd icub-main && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
               -DENABLE_icubmod_cartesiancontrollerserver=ON -DENABLE_icubmod_cartesiancontrollerclient=ON -DENABLE_icubmod_gazecontrollerclient=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # cer
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/cer.git --depth 1 --branch devel
        cd cer && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # icub-contrib-common
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-contrib-common.git --depth 1
        cd icub-contrib-common && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
 
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    - name: Configure [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON ..

    - name: Configure [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build    
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTING=ON ..
      
    - name: Build
      shell: bash
      run: |
        cd build
        # Fix for using YARP idl generators (that link ACE) in Windows 
        # See https://github.com/robotology/idyntree/issues/569 for more details
        export PATH=$PATH:${GITHUB_WORKSPACE}/install/bin:${VCPKG_INSTALLATION_ROOT}/installed/x64-windows/bin
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Install
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target install
