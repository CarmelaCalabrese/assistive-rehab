<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
  <name>robotSkeletonPublisher</name>
  <doxygen-group>robotSkeletonPublisher</doxygen-group>
  <description>This module publish the skeleton representing the robot.</description>
  <copypolicy> Released under the terms of the BSD 3-Clause License.</copypolicy>
  <version>0.3.0</version>

  <description-long>
   This module connects to robot's state ports to retrieve the joints and then uses such information to compute the 
   3D configuration of the limbs. The resulting skeleton is sent to the viewer and to the OPC.
   The 3D info are expressed in the world frame if the navigation state is provided; the root becomes the depth_center
   frame otherwise.
  </description-long>

  <arguments>
    <param default="robot" desc="Name of the skeleton to be displayed.">skeleton-name</param>
    <param default="(0.23 0.7 0.44)" desc="Skeleton's color using rgb color specification.">skeleton-color</param>
    <param default="0.05" desc="Periodicity of the module (s).">period</param>
    <param default="cer" desc="Name of the robot to connect to.">robot</param>
    <param default="true" desc="Flag to set/unset visibility in the viewer.">visibility</param>
  </arguments>

  <authors>
    <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
  </authors>

  <data>
      <input>
          <type>Property</type>
          <port>/robotSkeletonPublisher/nav:i</port>
          <description>
            Receives the navigation status broadcast.
          </description>
      </input>
      <output>
          <type>Bottle</type>
          <port>/robotSkeletonPublisher/viewer:o</port>
          <description>
            Outputs 3D skeletons to send to \ref skeletonViewer for visualization.
          </description>
      </output>
      <output>
          <type>rpc</type>
          <port>/robotSkeletonPublisher/opc:rpc</port>
          <description>
              Sends commands to \ref objectsPropertiesCollector to add the skeleton to the database.
          </description>
      </output>      
  </data>

  <services>
    <server>
      <type>robotSkeletonPublisher_IDL</type>
      <idl>idl.thrift</idl>
      <port>/robotSkeletonPublisher/cmd:rpc</port>
      <description>service port</description>
    </server>
  </services>

</module>
